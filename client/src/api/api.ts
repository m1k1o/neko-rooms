/* tslint:disable */
/* eslint-disable */
/**
 * Neko Rooms
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BrowserPolicy
 */
export interface BrowserPolicy {
    /**
     * 
     * @type {string}
     * @memberof BrowserPolicy
     */
    'type'?: BrowserPolicyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BrowserPolicy
     */
    'path'?: string;
    /**
     * 
     * @type {BrowserPolicyContent}
     * @memberof BrowserPolicy
     */
    'content'?: BrowserPolicyContent;
}

export const BrowserPolicyTypeEnum = {
    firefox: 'firefox',
    chromium: 'chromium'
} as const;

export type BrowserPolicyTypeEnum = typeof BrowserPolicyTypeEnum[keyof typeof BrowserPolicyTypeEnum];

/**
 * 
 * @export
 * @interface BrowserPolicyContent
 */
export interface BrowserPolicyContent {
    /**
     * 
     * @type {Array<BrowserPolicyExtension>}
     * @memberof BrowserPolicyContent
     */
    'extensions'?: Array<BrowserPolicyExtension>;
    /**
     * 
     * @type {boolean}
     * @memberof BrowserPolicyContent
     */
    'developer_tools'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BrowserPolicyContent
     */
    'persistent_data'?: boolean;
}
/**
 * 
 * @export
 * @interface BrowserPolicyExtension
 */
export interface BrowserPolicyExtension {
    /**
     * 
     * @type {string}
     * @memberof BrowserPolicyExtension
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BrowserPolicyExtension
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface PullLayer
 */
export interface PullLayer {
    /**
     * 
     * @type {string}
     * @memberof PullLayer
     */
    'status'?: string;
    /**
     * 
     * @type {PullLayerProgressDetail}
     * @memberof PullLayer
     */
    'progressDetail'?: PullLayerProgressDetail;
    /**
     * 
     * @type {string}
     * @memberof PullLayer
     */
    'progress'?: string;
    /**
     * 
     * @type {string}
     * @memberof PullLayer
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface PullLayerProgressDetail
 */
export interface PullLayerProgressDetail {
    /**
     * 
     * @type {number}
     * @memberof PullLayerProgressDetail
     */
    'current'?: number;
    /**
     * 
     * @type {number}
     * @memberof PullLayerProgressDetail
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface PullStart
 */
export interface PullStart {
    /**
     * 
     * @type {string}
     * @memberof PullStart
     */
    'neko_image'?: string;
    /**
     * 
     * @type {string}
     * @memberof PullStart
     */
    'registry_user'?: string;
    /**
     * 
     * @type {string}
     * @memberof PullStart
     */
    'registry_pass'?: string;
}
/**
 * 
 * @export
 * @interface PullStatus
 */
export interface PullStatus {
    /**
     * 
     * @type {boolean}
     * @memberof PullStatus
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PullStatus
     */
    'started'?: string;
    /**
     * 
     * @type {Array<PullLayer>}
     * @memberof PullStatus
     */
    'layers'?: Array<PullLayer>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PullStatus
     */
    'status'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PullStatus
     */
    'finished'?: string;
}
/**
 * 
 * @export
 * @interface RoomEntry
 */
export interface RoomEntry {
    /**
     * 
     * @type {string}
     * @memberof RoomEntry
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomEntry
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomEntry
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomEntry
     */
    'neko_image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RoomEntry
     */
    'is_outdated'?: boolean;
    /**
     * 0 when using mux
     * @type {number}
     * @memberof RoomEntry
     */
    'max_connections'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RoomEntry
     */
    'running'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RoomEntry
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomEntry
     */
    'created'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof RoomEntry
     */
    'labels'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface RoomMember
 */
export interface RoomMember {
    /**
     * 
     * @type {string}
     * @memberof RoomMember
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomMember
     */
    'displayname'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RoomMember
     */
    'admin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoomMember
     */
    'muted'?: boolean;
}
/**
 * 
 * @export
 * @interface RoomMount
 */
export interface RoomMount {
    /**
     * 
     * @type {string}
     * @memberof RoomMount
     */
    'type'?: RoomMountTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RoomMount
     */
    'host_path'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomMount
     */
    'container_path'?: string;
}

export const RoomMountTypeEnum = {
    private: 'private',
    template: 'template',
    protected: 'protected',
    public: 'public'
} as const;

export type RoomMountTypeEnum = typeof RoomMountTypeEnum[keyof typeof RoomMountTypeEnum];

/**
 * 
 * @export
 * @interface RoomResources
 */
export interface RoomResources {
    /**
     * relative weight vs. other containers
     * @type {number}
     * @memberof RoomResources
     */
    'cpu_shares'?: number;
    /**
     * in units of 10^-9 CPUs
     * @type {number}
     * @memberof RoomResources
     */
    'nano_cpus'?: number;
    /**
     * in bytes
     * @type {number}
     * @memberof RoomResources
     */
    'shm_size'?: number;
    /**
     * in bytes
     * @type {number}
     * @memberof RoomResources
     */
    'memory'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof RoomResources
     */
    'gpus'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RoomResources
     */
    'devices'?: Array<string>;
}
/**
 * 
 * @export
 * @interface RoomSettings
 */
export interface RoomSettings {
    /**
     * 
     * @type {number}
     * @memberof RoomSettings
     */
    'api_version'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoomSettings
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomSettings
     */
    'neko_image'?: string;
    /**
     * 0 when using mux
     * @type {number}
     * @memberof RoomSettings
     */
    'max_connections'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoomSettings
     */
    'user_pass'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomSettings
     */
    'admin_pass'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RoomSettings
     */
    'control_protection'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoomSettings
     */
    'implicit_control'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RoomSettings
     */
    'broadcast_pipeline'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomSettings
     */
    'screen'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomSettings
     */
    'video_codec'?: string;
    /**
     * 
     * @type {number}
     * @memberof RoomSettings
     */
    'video_bitrate'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoomSettings
     */
    'video_pipeline'?: string;
    /**
     * 
     * @type {number}
     * @memberof RoomSettings
     */
    'video_max_fps'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoomSettings
     */
    'audio_codec'?: string;
    /**
     * 
     * @type {number}
     * @memberof RoomSettings
     */
    'audio_bitrate'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoomSettings
     */
    'audio_pipeline'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof RoomSettings
     */
    'envs'?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof RoomSettings
     */
    'labels'?: { [key: string]: string; };
    /**
     * 
     * @type {Array<RoomMount>}
     * @memberof RoomSettings
     */
    'mounts'?: Array<RoomMount>;
    /**
     * 
     * @type {RoomResources}
     * @memberof RoomSettings
     */
    'resources'?: RoomResources;
    /**
     * 
     * @type {string}
     * @memberof RoomSettings
     */
    'hostname'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RoomSettings
     */
    'dns'?: Array<string>;
    /**
     * 
     * @type {BrowserPolicy}
     * @memberof RoomSettings
     */
    'browser_policy'?: BrowserPolicy;
}
/**
 * 
 * @export
 * @interface RoomStats
 */
export interface RoomStats {
    /**
     * 
     * @type {number}
     * @memberof RoomStats
     */
    'connections'?: number;
    /**
     * 
     * @type {string}
     * @memberof RoomStats
     */
    'host'?: string;
    /**
     * 
     * @type {Array<RoomMember>}
     * @memberof RoomStats
     */
    'members'?: Array<RoomMember>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof RoomStats
     */
    'banned'?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof RoomStats
     */
    'locked'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof RoomStats
     */
    'server_started_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomStats
     */
    'last_admin_left_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RoomStats
     */
    'last_user_left_at'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof RoomStats
     */
    'control_protection'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoomStats
     */
    'implicit_control'?: boolean;
}
/**
 * 
 * @export
 * @interface RoomsConfig
 */
export interface RoomsConfig {
    /**
     * 
     * @type {number}
     * @memberof RoomsConfig
     */
    'connections'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof RoomsConfig
     */
    'neko_images'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof RoomsConfig
     */
    'storage_enabled'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RoomsConfig
     */
    'uses_mux'?: boolean;
}

/**
 * ConfigApi - axios parameter creator
 * @export
 */
export const ConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get rooms config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsConfig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/config/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigApi - functional programming interface
 * @export
 */
export const ConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get rooms config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomsConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomsConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomsConfig(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigApi - factory interface
 * @export
 */
export const ConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigApiFp(configuration)
    return {
        /**
         * 
         * @summary Get rooms config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsConfig(options?: any): AxiosPromise<RoomsConfig> {
            return localVarFp.roomsConfig(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export class ConfigApi extends BaseAPI {
    /**
     * 
     * @summary Get rooms config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public roomsConfig(options?: AxiosRequestConfig) {
        return ConfigApiFp(this.configuration).roomsConfig(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Start new pull
         * @param {PullStart} [pullStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullStart: async (pullStart?: PullStart, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pull`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pullStart, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get pull status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pull`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get pull status as SSE
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullStatusSSE: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pull/sse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop existing pull in progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullStop: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/pull`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Start new pull
         * @param {PullStart} [pullStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pullStart(pullStart?: PullStart, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PullStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pullStart(pullStart, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get pull status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pullStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PullStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pullStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get pull status as SSE
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pullStatusSSE(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PullLayer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pullStatusSSE(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Stop existing pull in progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pullStop(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pullStop(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Start new pull
         * @param {PullStart} [pullStart] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullStart(pullStart?: PullStart, options?: any): AxiosPromise<PullStatus> {
            return localVarFp.pullStart(pullStart, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get pull status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullStatus(options?: any): AxiosPromise<PullStatus> {
            return localVarFp.pullStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get pull status as SSE
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullStatusSSE(options?: any): AxiosPromise<Array<PullLayer>> {
            return localVarFp.pullStatusSSE(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stop existing pull in progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullStop(options?: any): AxiosPromise<void> {
            return localVarFp.pullStop(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Start new pull
     * @param {PullStart} [pullStart] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pullStart(pullStart?: PullStart, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pullStart(pullStart, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get pull status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pullStatus(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pullStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get pull status as SSE
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pullStatusSSE(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pullStatusSSE(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stop existing pull in progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pullStop(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pullStop(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RoomsApi - axios parameter creator
 * @export
 */
export const RoomsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Export room as docker-compose
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAsDockerCompose: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/docker-compose.yaml`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new room
         * @param {boolean} [start] 
         * @param {RoomSettings} [roomSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomCreate: async (start?: boolean, roomSettings?: RoomSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomSettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get room entry
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomGet: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('roomGet', 'roomId', roomId)
            const localVarPath = `/api/rooms/{roomId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get room entry by name
         * @param {string} roomName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomGetByName: async (roomName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomName' is not null or undefined
            assertParamExists('roomGetByName', 'roomName', roomName)
            const localVarPath = `/api/rooms/{roomName}/by-name`
                .replace(`{${"roomName"}}`, encodeURIComponent(String(roomName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Recreate room
         * @param {string} roomId 
         * @param {boolean} [start] 
         * @param {RoomSettings} [roomSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomRecreate: async (roomId: string, start?: boolean, roomSettings?: RoomSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('roomRecreate', 'roomId', roomId)
            const localVarPath = `/api/rooms/{roomId}/recreate`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomSettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomRemove: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('roomRemove', 'roomId', roomId)
            const localVarPath = `/api/rooms/{roomId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restart room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomRestart: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('roomRestart', 'roomId', roomId)
            const localVarPath = `/api/rooms/{roomId}/restart`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get room settings
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomSettings: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('roomSettings', 'roomId', roomId)
            const localVarPath = `/api/rooms/{roomId}/settings`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomStart: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('roomStart', 'roomId', roomId)
            const localVarPath = `/api/rooms/{roomId}/start`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get room statistics
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomStats: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('roomStats', 'roomId', roomId)
            const localVarPath = `/api/rooms/{roomId}/stats`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomStop: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('roomStop', 'roomId', roomId)
            const localVarPath = `/api/rooms/{roomId}/stop`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all rooms
         * @param {{ [key: string]: string; }} [labels] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsList: async (labels?: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (labels !== undefined) {
                for (let param of Object.keys(labels)) {
                    localVarQueryParameter[param] = labels?.[param];
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomsApi - functional programming interface
 * @export
 */
export const RoomsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Export room as docker-compose
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAsDockerCompose(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportAsDockerCompose(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new room
         * @param {boolean} [start] 
         * @param {RoomSettings} [roomSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomCreate(start?: boolean, roomSettings?: RoomSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomCreate(start, roomSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get room entry
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomGet(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomGet(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get room entry by name
         * @param {string} roomName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomGetByName(roomName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomGetByName(roomName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Recreate room
         * @param {string} roomId 
         * @param {boolean} [start] 
         * @param {RoomSettings} [roomSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomRecreate(roomId: string, start?: boolean, roomSettings?: RoomSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomRecreate(roomId, start, roomSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomRemove(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomRemove(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Restart room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomRestart(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomRestart(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get room settings
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomSettings(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomSettings(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Start room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomStart(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomStart(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get room statistics
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomStats(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomStats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomStats(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Stop room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomStop(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomStop(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all rooms
         * @param {{ [key: string]: string; }} [labels] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roomsList(labels?: { [key: string]: string; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoomEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roomsList(labels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomsApi - factory interface
 * @export
 */
export const RoomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomsApiFp(configuration)
    return {
        /**
         * 
         * @summary Export room as docker-compose
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAsDockerCompose(options?: any): AxiosPromise<void> {
            return localVarFp.exportAsDockerCompose(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new room
         * @param {boolean} [start] 
         * @param {RoomSettings} [roomSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomCreate(start?: boolean, roomSettings?: RoomSettings, options?: any): AxiosPromise<RoomEntry> {
            return localVarFp.roomCreate(start, roomSettings, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get room entry
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomGet(roomId: string, options?: any): AxiosPromise<RoomEntry> {
            return localVarFp.roomGet(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get room entry by name
         * @param {string} roomName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomGetByName(roomName: string, options?: any): AxiosPromise<RoomEntry> {
            return localVarFp.roomGetByName(roomName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Recreate room
         * @param {string} roomId 
         * @param {boolean} [start] 
         * @param {RoomSettings} [roomSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomRecreate(roomId: string, start?: boolean, roomSettings?: RoomSettings, options?: any): AxiosPromise<RoomEntry> {
            return localVarFp.roomRecreate(roomId, start, roomSettings, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomRemove(roomId: string, options?: any): AxiosPromise<void> {
            return localVarFp.roomRemove(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restart room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomRestart(roomId: string, options?: any): AxiosPromise<void> {
            return localVarFp.roomRestart(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get room settings
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomSettings(roomId: string, options?: any): AxiosPromise<RoomSettings> {
            return localVarFp.roomSettings(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomStart(roomId: string, options?: any): AxiosPromise<void> {
            return localVarFp.roomStart(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get room statistics
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomStats(roomId: string, options?: any): AxiosPromise<RoomStats> {
            return localVarFp.roomStats(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stop room
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomStop(roomId: string, options?: any): AxiosPromise<void> {
            return localVarFp.roomStop(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all rooms
         * @param {{ [key: string]: string; }} [labels] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roomsList(labels?: { [key: string]: string; }, options?: any): AxiosPromise<Array<RoomEntry>> {
            return localVarFp.roomsList(labels, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomsApi - object-oriented interface
 * @export
 * @class RoomsApi
 * @extends {BaseAPI}
 */
export class RoomsApi extends BaseAPI {
    /**
     * 
     * @summary Export room as docker-compose
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public exportAsDockerCompose(options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).exportAsDockerCompose(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new room
     * @param {boolean} [start] 
     * @param {RoomSettings} [roomSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomCreate(start?: boolean, roomSettings?: RoomSettings, options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomCreate(start, roomSettings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get room entry
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomGet(roomId: string, options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomGet(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get room entry by name
     * @param {string} roomName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomGetByName(roomName: string, options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomGetByName(roomName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Recreate room
     * @param {string} roomId 
     * @param {boolean} [start] 
     * @param {RoomSettings} [roomSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomRecreate(roomId: string, start?: boolean, roomSettings?: RoomSettings, options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomRecreate(roomId, start, roomSettings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove room
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomRemove(roomId: string, options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomRemove(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restart room
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomRestart(roomId: string, options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomRestart(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get room settings
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomSettings(roomId: string, options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomSettings(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start room
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomStart(roomId: string, options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomStart(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get room statistics
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomStats(roomId: string, options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomStats(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stop room
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomStop(roomId: string, options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomStop(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all rooms
     * @param {{ [key: string]: string; }} [labels] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomsApi
     */
    public roomsList(labels?: { [key: string]: string; }, options?: AxiosRequestConfig) {
        return RoomsApiFp(this.configuration).roomsList(labels, options).then((request) => request(this.axios, this.basePath));
    }
}



